# author: mandes.schoenherr@unibe.ch
easyblock = 'Tarball'

name = 'CustomRepo'
version = 'generic'

hidden = True

homepage = 'https://hpc-unibe-ch.github.io/hpc-unibe-ch.github.io/user-guide/software/installing-custom-software.html'
description = """Configuration module setting environment variables to install software 
using EasyBuild in user/group/institute space.
For installation the EasyBuild module needs to be loaded before the module CustomRepo.
For using the custom repository only this module needs to be loaded."""

toolchain = SYSTEM
sources = ['CustomRepo.tar.gz']
checksums = ['4e958590ae42084c6d385ea0116546292f904e592d2aed26b2ab6ddf39a8a958']

#builddependencies = [('EasyBuild', '4.0.1')]

postinstallcmds = ['cd %(installdir)s/../../../modulefiles/all/%(name)s/; '
                    'rm user.lua institute.lua project.lua; '
                    'ln -s .generic.lua user.lua; '
                    'ln -s .generic.lua institute.lua; '
                    'ln -s .generic.lua ws_inst.lua; '
                    'ln -s .generic.lua project.lua;']

modextrapaths = {'PATH': ''}

modluafooter = """
require 'os'

local name = myModuleName()
local version = myModuleVersion()
local arch_typ = subprocess("gcc -march=native -Q --help=target | grep '^ *-march' | awk '{print $2}'")
arch_typ = string.gsub(arch_typ, '\\n', '')

-- global easybuild resources
local global_base = '/software.el7'
local global_base_generic = '/storage/software/generic.el7'
local EB_base = os.getenv('EBROOTEASYBUILD')

-- get the base directory, depending on the module version
-- assume that $HOME has not been clobbered or modified
if version == 'user' then
      base = pathJoin(os.getenv('HOME'))
elseif version == 'institute' then
      base = pathJoin(os.getenv('HOME'), '..', 'shared')
elseif version == 'ws_inst' then
      local out = subprocess("groups | awk '{print $1}' ")
      group = string.gsub(out, '\\n', '')
      base = pathJoin('/home/ubelix/', group, 'shared')
elseif version == 'project' then
      if not os.getenv("CUSTOM_REPO_PROJECT_ID") then
            LmodError("ERROR: You need to specify the project ID in environment " ..
                      "variable CUSTOM_REPO_PROJECT_ID before loading this module, " ..
                      "e.g. export CUSTOM_REPO_PROJECT_ID=<project_name>")
      end
      base = pathJoin('/storage/research/', os.getenv('CUSTOM_REPO_PROJECT_ID'), 'shared')
elseif version == '.generic' then
      base = pathJoin(os.getenv('HOME'))
else
      LmodError('Error the module ' .. name .. '/' .. version .. ' is not defined well, please contact support.')
end

-- distinguish different software stacks
if (arch_typ == 'corei7-avx' or arch_typ == 'sandybridge') then
      arch = 'sandybridge.el7'
elseif (arch_typ == 'core-avx-i' or arch_typ == 'ivybridge') then
      arch = 'ivybridge.el7'
elseif (arch_typ == 'core-avx2' or arch_typ == 'broadwell') then
      arch = 'broadwell.el7'
elseif (arch_typ == 'btver2' or arch_typ == 'amd') then
      arch = 'epyc2.el7'
else
      LmodMessage('WARNING: the module ' .. name .. '/' .. version .. ' has no definition for node architecture ' .. 
                arch_typ .. ', please contact support. Using fallback to sandybridge')
      arch = 'sandybridge.el7'
end

ebver = os.getenv('EBVERSIONEASYBUILD')
if not (ebver == nil) then
    setenv('EASYBUILD_HOOKS', pathJoin('/storage/software/easyconfigs', 'ubelix_hooks.py'))
end

if (os.getenv('USER') ~= 'l_easybuild') then
    setenv('WORKSPACE', base)
    -- Don't warn for this and Easybuild module during eb process
    modules = 'EasyBuild,' .. name
    setenv('EASYBUILD_ALLOW_LOADED_MODULES', modules)
    setenv('EASYBUILD_DETECT_LOADED_MODULES', 'warn')

    -- Note: EASYBUILD_PREFIX implicitly sets EASYBUILD_BUILDPATH,
    -- EASYBUILD_SOURCEPATH and EASYBUILD_INSTALLPATH unless these are overridden
    append_path('EASYBUILD_SOURCEPATH', pathJoin(global_base, 'sources'))

    r_path = pathJoin(base, 'R_packages')
    setenv('R_LIBS', r_path)

    -- for custom architecture dependent repo
    EASYBUILD_PREFIX = pathJoin(base, 'easybuild', arch)
    setenv('EASYBUILD_PREFIX', EASYBUILD_PREFIX)
    setenv('EASYBUILD_INSTALLPATH_MODULES', pathJoin(EASYBUILD_PREFIX, 'modulefiles'))
    prepend_path('EASYBUILD_SOURCEPATH', pathJoin(base, 'easybuild', 'sources'))
    prepend_path('MODULEPATH', pathJoin(EASYBUILD_PREFIX, 'modulefiles', 'all'))
    setenv('EASYBUILD_PACKAGEPATH', pathJoin(base, 'easybuild', 'easybuild-resources', 'packages'))

    -- for custom generic repo
    GENERIC_EASYBUILD_PREFIX = pathJoin(base, 'easybuild', 'generic.el7')
    prepend_path('MODULEPATH', pathJoin(GENERIC_EASYBUILD_PREFIX, 'modulefiles', 'all'))
    setenv('CUSTOM_GENERIC_EASYBUILD_PREFIX', GENERIC_EASYBUILD_PREFIX)
    setenv('CUSTOM_GENERIC_EASYBUILD_INSTALLPATH_MODULES', pathJoin(GENERIC_EASYBUILD_PREFIX, 'modulefiles'))
else
    -- standard variables not necessary for global installation
    -- settings for generic software stack
    setenv('CUSTOM_GENERIC_EASYBUILD_PREFIX', global_base_generic)
    setenv('CUSTOM_GENERIC_EASYBUILD_INSTALLPATH_MODULES', pathJoin(global_base_generic, 'modulefiles'))
    -- provide hooks
    if ebver == nil then
       LmodError('ERROR: please load module Easybuild before loading ' .. name .. '/' .. version )
    end
end
"""



sanity_check_paths = {
    'files': ['eb-install-all', 'eb-install-generic'],
    'dirs': [''],
}

moduleclass = 'base'

