# author: # Mandes SchÃ¶nherr (mandes.schoenherr@unibe.ch) mand35@github
# in casses of issues or feature request write UniBe HPC support
easyblock = 'Tarball'

name = 'Workspace'
version = '1.0'

homepage = 'https://hpc-unibe-ch.github.io/hpc-workspaces/environment.html'
description = """UniBE HPC Workspace module for easy access to data and custom Sorftware of an specific HPC workspace.
The modules searches available Workspaces and loades the `the one you belong to` or provides choices, if more than one are available for you.

When loaded it provides:
- environment variables to WORKSPACE and related SCRATCH space
- sets umask for group writeable files/directories
- workspace software stack (see below)
- workspace SLURM account

Custom Software Stack:
- to INSTALL new package with Easybuild load `module load Easybuild` and use
  `eb_install_all` for installing package for each CPU architecture OR
  `eb_install_generic` for installing a architecture independent package.
- installed packages shoulg be automatically available after loading this Workspace module

Singularity:
- sets SINGULARITY_BINDPATH to the Workspace directory
"""

toolchain = SYSTEM
#sources = ['CustomRepo.tar.gz', 'ws_tools.tar.gz']
sources = ['CustomRepo.tar.gz']
checksums = ['51abaf8256e74b1c2593262a166171412a4ddf90388626714c761c0878d90797']

postinstallcmds = ['cd %(installdir)s/../../../modulefiles/all/%(name)s/; '
                    'rm home.lua; '
                    'ln -s %(version)s.lua debug.lua ;'
                    'ln -s %(version)s.lua home.lua ']

modextrapaths = {'PATH': ''}

modluafooter = """
local workspaceDirs='/storage/workspaces/'
local scratchDir='/storage/scratch/'
local ws_identifier='.WSinfo'
local ws_primGrp_identifier='.usage.txt'

local WS_VAR='HPC_WORKSPACE'

fallback_arch='sandybridge.el7'

local name = myModuleName()
local version = myModuleVersion()
local newline = '\\\n'
conflict(name)

-- l_easybuild user just need custom repo variables for eb-install tool
local function setleasybuild()
    -- standard variables not necessary for global installation
    -- settings for generic software stack
    setenv('CUSTOM_GENERIC_EASYBUILD_PREFIX', global_base_generic)
    setenv('CUSTOM_GENERIC_EASYBUILD_INSTALLPATH_MODULES', pathJoin(global_base_generic,
'modulefiles'))
    -- provide hooks
    if ebver == nil then
       LmodError('ERROR: please load module Easybuild before loading ' .. name .. '/' ..
version )
    end
end

local function CustomRepo(workspace)
  local wsSW = pathJoin(workspace, 'Software')
  local global_base = '/software.el7'
  local global_base_generic = '/storage/software/generic.el7'
  local EB_base = os.getenv('EBROOTEASYBUILD')

  prepend_path("MODULEPATH", pathJoin(workspace, 'modulefiles'))

  -- distinguish different software stacks
  local arch_typ = subprocess("gcc -march=native -Q --help=target | grep '^ *-march' | awk '{print $2}'")
  arch_typ = arch_typ:gsub(newline, "")
  if ( arch_typ == 'corei7-avx' or arch_typ == 'sandybridge') then
        arch = 'sandybridge.el7'
  elseif ( arch_typ == 'core-avx-i' or arch_typ == 'ivybridge') then
        arch = 'ivybridge.el7'
  elseif ( arch_typ == 'core-avx2' or arch_typ == 'broadwell') then
        arch = 'broadwell.el7'
  elseif (arch_typ == 'btver2' or arch_typ == 'znver1' or arch_typ == 'znver2' or arch_typ == 'znver3' or arch_typ == 'amd') then
        arch = 'epyc2.el7'
  else
        LmodMessage('Warning: the module ' .. name .. '/' .. version .. ' has no definition for node architecture ' ..
                  arch_typ .. ', please contact support. ')
        arch = fallback_arch
  end
  ebver = os.getenv('EBVERSIONEASYBUILD')
  if not (ebver == nil) then
    setenv('EASYBUILD_HOOKS', pathJoin('/storage/software/easyconfigs', 'ubelix_hooks.py'))
  end

  -- Don't warn for this and Easybuild module during eb process
  modules = 'EasyBuild,' .. name
  setenv('EASYBUILD_ALLOW_LOADED_MODULES', modules)
  setenv('EASYBUILD_DETECT_LOADED_MODULES', 'warn')

  -- Note: EASYBUILD_PREFIX implicitly sets EASYBUILD_BUILDPATH,
  -- EASYBUILD_SOURCEPATH and EASYBUILD_INSTALLPATH unless these are overridden
  append_path('EASYBUILD_SOURCEPATH', pathJoin(global_base, 'sources'))

  -- for custom architecture dependent repo
  EASYBUILD_PREFIX = pathJoin(wsSW, arch, 'easybuild')
  setenv('EASYBUILD_PREFIX', EASYBUILD_PREFIX)
  setenv('EASYBUILD_INSTALLPATH_MODULES', pathJoin(wsSW, arch, 'modulefiles'))
  prepend_path('EASYBUILD_SOURCEPATH', pathJoin(wsSW, 'sources'))
  prepend_path('MODULEPATH', pathJoin(wsSW, arch, 'modulefiles', 'all'))
  --setenv('EASYBUILD_PACKAGEPATH', pathJoin(EASYBUILD_PREFIX, 'easybuild-resources', 'packages'))

  -- for custom generic repo
  GENERIC_EASYBUILD_PREFIX = pathJoin(wsSW, 'generic.el7', 'easybuild')
  prepend_path('MODULEPATH', pathJoin(wsSW, 'generic.el7', 'modulefiles', 'all'))
  setenv('CUSTOM_GENERIC_EASYBUILD_PREFIX', GENERIC_EASYBUILD_PREFIX)
  setenv('CUSTOM_GENERIC_EASYBUILD_INSTALLPATH_MODULES', pathJoin(wsSW, 'generic.el7', 'modulefiles'))
end

local function generalVars(ws_dir, scr_dir)
  -- env vars
  setenv('WORKSPACE', ws_dir)
  setenv('SCRATCH', scr_dir)

  -- SINGULARITY
  setenv('SINGULARITY_BINDPATH', ws_dir..','..scr_dir)

  -- Python package support
  if (isloaded('Anaconda3') or isloaded('Python')) then
    local pyver = subprocess("python -c \\\"import sys;print('{}.{}'.format(sys.version_info.major,sys.version_info.minor))\\\" ")
    pypackpath = pathJoin(ws_dir, 'PyPackages')
    prepend_path('PYTHONPACKAGEPATH', pypackpath)
    prepend_path('PYTHONPATH', pathJoin(pypackpath,'lib','python'..pyver, 'site-packages'))
    prepend_path('PATH', pathJoin(pypackpath,'bin'))
    setenv('CONDA_ENVS_PATH', pathJoin(ws_dir, '.conda'))
  end

  -- R packages
  local rpackpath = pathJoin(ws_dir, 'RPackages')
  setenv('R_LIBS', rpackpath)
end

local function setHome()
  local ws_path = pathJoin(os.getenv('HOME'))
  local user = os.getenv('USER')
  local scr_path = pathJoin(scratchDir, 'users', user)
  CustomRepo(ws_path)
  if (mode() == 'load') then
    LmodMessage('Workspace environment set for HOME:'..user)
  end
  generalVars(ws_path, scr_path)
end

function file_check(file_name)
  local file_found=io.open(file_name, "r")
  if file_found==nil then
    file_found=false
  else
    file_found=true
  end
  return file_found
end

local function setWorkspace(ws)
  -- vars
  local wsDir, rg, wsName = unpack(ws)
  local workspace = pathJoin(wsDir, rg, wsName)
  local scr = pathJoin(scratchDir, rg, wsName)
  -- easy access to spaces
  generalVars(workspace, scr)

  -- SLURM accounting
  -- -- only for prim group
  if file_check(pathJoin(workspace,ws_primGrp_identifier)) then
    setenv('SBATCH_ACCOUNT', wsName)
    setenv('SALLOC_ACCOUNT', wsName)
    setenv('SLURM_ACCOUNT', wsName)
  end

  -- Custom SW repo
  CustomRepo(workspace)

  -- set umask
  local gumask = os.getenv('WORKSPACE_PRELOAD_UMASK')
  if gumask == nil then
    gumask = subprocess("umask")
  end
  execute{cmd="umask "..gumask, modeA={"unload"}}
  execute{cmd="umask 002", modeA={"load"}}
  setenv('WORKSPACE_PRELOAD_UMASK', gumask)
  if (mode() == 'load') then
    LmodMessage('Workspace environment set for:'..newline..'   '..workspace)
  elseif (mode() == 'unload') then
    execute{cmd="unset HPC_WORKSPACE",modeA={"unload"}}
    unsetenv('WORKSPACE_PRELOAD_UMASK')
  end
end

local function WorkspaceAccess(ws)
  local code, out = subprocess('find '..ws..'/ -maxdepth 0 -type f -perm -g=rx')
  io.stderr:write('test dir: ', tostring(code), newline)
  if code == 0 then
    res = true
  else
    res = false
  end
  return res
end

local function getWorkspaces(ws_name)
  if (ws_name == '' or ws_name == nil) then
    ws_name = '*'
  end
  local t={}
  local ws_count = 0
  for wsDir in string.gmatch(workspaceDirs, '%S+') do
    -- get all accessible workspaces in particular directory
    --    or search for particular accessible workspace
    local search=pathJoin(wsDir,'*',ws_name,ws_identifier)
    local dirs = subprocess('find '..search..' -maxdepth 1 2> /dev/null ')
    dirs = string.gsub(dirs, newline, ' ')

    regex=wsDir..'([%a%p%d]+)/([%a%p%d]+)/'..ws_identifier
    for rg,ws in string.gmatch(dirs, regex) do
      table.insert(t, {wsDir, rg, ws})
      ws_count = ws_count+1
    end
  end
  return ws_count, t
end

local function isempty(s)
  return s == nil or s == ''
end

local function findAndSetWS()
  ws_set = os.getenv(WS_VAR)

  if ( not( isempty(ws_set) ) ) then
    -- selected workspace
    local count, ws = getWorkspaces(ws_set)
    if count == 0 then
      LmodError('The selected workspace ', WS_VAR, '=', ws_set,
                ' is not available for you or does not exist')
    elseif (count > 1) then
      LmodError('There are multiple workspaces with that name ',
                WS_VAR, '=', ws_set,'. This should not be the case, ',
                'please contact support.')
    end
    setWorkspace(ws[1])

  else

    local ws_count, ws = getWorkspaces()
    -- for single / selected Workspace
    if ( ws_count == 1 ) then
       setWorkspace(ws[1])
    elseif (ws_count > 1) then
      if (mode() == 'load') then
        -- if multiple workspaces available, list then
        --   list only Workspace name, not researchGroup
        local wsList = ''
        local tempList = ''
        for i, locDir in ipairs(ws) do
          loc, rg, ws = unpack(locDir)
          wsList=wsList..ws..', '
          temp='export '..WS_VAR..'='..ws..'; module load '..name
          tempList=tempList..'   '..temp..newline
        end
        LmodMessage('Workspaces are available: '..newline,
                    '   ', wsList, newline,
                    'Please select and load ONE of the following: '..newline,
                    tempList)
        execute {cmd="module unload "..name,modeA={"load"}}
      end
    else
      -- no workspace available
      if (mode() == 'load') then
          LmodMessage('There are no workspaces detected for you, ',
                      'if you already have one, please contact support.'..newline..
                      'If you want to use your $HOME instead, please load '..newline..
                      '   '..'module load '..name..'/home')
          execute {cmd="module unload "..name,modeA={"load"}}
      end
    end
  end
end

-- main with determing the workspace
if (os.getenv('USER') == 'l_easybuild') then
  setleasybuild()
elseif version == 'home' then
  setHome()
else
  findAndSetWS()
end
"""

sanity_check_paths = {
    'files': ['eb-install-all', 'eb-install-generic'],
    'dirs': [''],
}

moduleclass = 'base'

